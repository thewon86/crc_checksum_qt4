#include "crc7.h"

/** CRC table for the CRC-7. The poly is 0x9 (x^7 + x^3 + 1) */
unsigned char const crc7_table[256] = {
    0x00, 0x09, 0x12, 0x1B, 0x24, 0x2D, 0x36, 0x3F,
    0x48, 0x41, 0x5A, 0x53, 0x6C, 0x65, 0x7E, 0x77,
    0x19, 0x10, 0x0B, 0x02, 0x3D, 0x34, 0x2F, 0x26,
    0x51, 0x58, 0x43, 0x4A, 0x75, 0x7C, 0x67, 0x6E,
    0x32, 0x3B, 0x20, 0x29, 0x16, 0x1F, 0x04, 0x0D,
    0x7A, 0x73, 0x68, 0x61, 0x5E, 0x57, 0x4C, 0x45,
    0x2B, 0x22, 0x39, 0x30, 0x0F, 0x06, 0x1D, 0x14,
    0x63, 0x6A, 0x71, 0x78, 0x47, 0x4E, 0x55, 0x5C,
    0x64, 0x6D, 0x76, 0x7F, 0x40, 0x49, 0x52, 0x5B,
    0x2C, 0x25, 0x3E, 0x37, 0x08, 0x01, 0x1A, 0x13,
    0x7D, 0x74, 0x6F, 0x66, 0x59, 0x50, 0x4B, 0x42,
    0x35, 0x3C, 0x27, 0x2E, 0x11, 0x18, 0x03, 0x0A,
    0x56, 0x5F, 0x44, 0x4D, 0x72, 0x7B, 0x60, 0x69,
    0x1E, 0x17, 0x0C, 0x05, 0x3A, 0x33, 0x28, 0x21,
    0x4F, 0x46, 0x5D, 0x54, 0x6B, 0x62, 0x79, 0x70,
    0x07, 0x0E, 0x15, 0x1C, 0x23, 0x2A, 0x31, 0x38,
    0x41, 0x48, 0x53, 0x5A, 0x65, 0x6C, 0x77, 0x7E,
    0x09, 0x00, 0x1B, 0x12, 0x2D, 0x24, 0x3F, 0x36,
    0x58, 0x51, 0x4A, 0x43, 0x7C, 0x75, 0x6E, 0x67,
    0x10, 0x19, 0x02, 0x0B, 0x34, 0x3D, 0x26, 0x2F,
    0x73, 0x7A, 0x61, 0x68, 0x57, 0x5E, 0x45, 0x4C,
    0x3B, 0x32, 0x29, 0x20, 0x1F, 0x16, 0x0D, 0x04,
    0x6A, 0x63, 0x78, 0x71, 0x4E, 0x47, 0x5C, 0x55,
    0x22, 0x2B, 0x30, 0x39, 0x06, 0x0F, 0x14, 0x1D,
    0x25, 0x2C, 0x37, 0x3E, 0x01, 0x08, 0x13, 0x1A,
    0x6D, 0x64, 0x7F, 0x76, 0x49, 0x40, 0x5B, 0x52,
    0x3C, 0x35, 0x2E, 0x27, 0x18, 0x11, 0x0A, 0x03,
    0x74, 0x7D, 0x66, 0x6F, 0x50, 0x59, 0x42, 0x4B,
    0x17, 0x1E, 0x05, 0x0C, 0x33, 0x3A, 0x21, 0x28,
    0x5F, 0x56, 0x4D, 0x44, 0x7B, 0x72, 0x69, 0x60,
    0x0E, 0x07, 0x1C, 0x15, 0x2A, 0x23, 0x38, 0x31,
    0x46, 0x4F, 0x54, 0x5D, 0x62, 0x6B, 0x70, 0x79
};

CRC7::CRC7() :
    m_crc_poly(0x09),
    m_crc_seed(0x0),
    m_crc_resu(0x0)
{
}

CRC7::CRC7(quint8 poly, quint8 seed)
{
    this->setPoly(poly);
    this->setSeed(seed);
}

QString CRC7::algorithmName() const
{
    return QString("CRC-7");
}

quint32 CRC7::CRCSum(unsigned char *data, int numb)
{
    bool lsb;
    unsigned char crc = m_crc_seed;
    unsigned char crc_poly = 0;
//    MDEBUGHEX(m_crc_poly);
    if(isMsbFirst()){
        crc_poly = m_crc_poly << 1;
        crc <<= 1;
    }
    else{
        quint8 filter = 0x01;
        bool bit;
        for(int i=0; i < 7; i++){
            bit = m_crc_poly & filter;
            crc_poly <<= 1;
            crc_poly |= bit;
            filter <<= 1;
        }
    }
//    MDEBUGHEX(crc_poly);
    for(int i=0; i< numb; i++){
        crc ^= *(data + i);
        for(int j=0;j<8;j++){
            if(isMsbFirst()){
                lsb = ((crc & 0x80) == 0x80);
                crc = crc << 1;
            }
            else{
                lsb = ((crc & 0x01) == 0x01);
                crc = crc >> 1;
            }
            if(lsb){
                crc ^= (crc_poly);
            }
        }
    }

    if(isMsbFirst()){
        crc >>= 1;
    }

    m_crc_resu = crc;

    return this->getCRCSum();
}

quint32 CRC7::CRCSum(unsigned char *data, int numb, quint32 poly, quint32 seed)
{
    this->setPoly(poly);
    this->setSeed(seed);
    return this->CRCSum(data, numb);
}

quint32 CRC7::getCRCSum() const
{
    return this->m_crc_resu;
}

QString CRC7::getCRCSumStr(quint32 crc_sum) const
{
    QString crc_s;
    crc_s.setNum(crc_sum, 16);

    while(crc_s.length() != 2){
        crc_s.insert(0, QString("0"));
    }
    return crc_s.toUpper();
}

void CRC7::setPoly(quint32 poly)
{
    this->m_crc_poly = poly & 0x7F;
}

void CRC7::setSeed(quint32 seed)
{
    this->m_crc_seed = seed & 0x7F;
}

quint32 CRC7::CRCTable(quint32 crc, unsigned char *data, int numb)
{
    while (numb--)
        crc = CRCByte(crc, *data++);
    return crc;
}

quint32 CRC7::CRCByte(quint32 crc, unsigned char data)
{
    return ::crc7_table[((crc << 1) ^ data) & 0xff];
}

void CRC7::printCRCTable()
{
    int i;
    QFile table_f;
    QTextStream table;
    QString table_name;
    QString poly_s;

    table_name = this->algorithmName().remove(QChar('-')) + QString("_table");
    table_f.setFileName(table_name + QString(".h"));
    table_f.open(QFile::WriteOnly);
    table.setDevice(&table_f);

    poly_s = getPolyStr(m_crc_poly, 7);
    table << "/** " << "CRC table for the " << this->algorithmName() << ". "
          << "The poly is 0x" << QString::number(m_crc_poly, 16)
          << " (" << poly_s << ") " << "*/\n";

    table << "unsigned char const " << table_name.toLower() << "[256] = {";
    for(i=0; i < 256;i++){
        this->CRCSum((unsigned char *)(&i), 1);
//         this->CRCTable(m_crc_seed, (unsigned char *)(&i), 1);

        if(i%8 == 0){
            table << "\n\t";
        }
        table << "0x" << this->getCRCSumStr(m_crc_resu).remove(QChar(' '));
        if(i != 255){
            table << ", ";
        }
    }
    table << "\n};\n";

    table_f.close();
}
